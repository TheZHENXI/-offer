int nextP[4][2] = {{-1,0},{1,0},{0,-1},{0,1}};
class Solution {
public:
    /**
     * 判断岛屿数量
     * @param grid char字符型vector<vector<>> 
     * @return int整型
     */
    void dfs(vector<vector<char>>& grid,vector<vector<int>>& visited,
             int row,int col,int curRow,int curCol)
    {
        //处理当前位置
        visited[curRow][curCol] = 1;
        //搜索所有的可能
        for(int i = 0;i < 4;i++)
        {
            int newX = curRow + nextP[i][0];
            int newY = curCol + nextP[i][1];

            if(newX >= row || newX < 0
            || newY >= col || newY < 0)
                continue;
            
            if(grid[newX][newY] == '1' && visited[newX][newY] == 0)
            {
                dfs(grid,visited,row,col,newX,newY);
            }
        }

    }
    int solve(vector<vector<char> >& grid) 
    {
        if(grid.empty())
            return 0;
        int row = grid.size();
        int col = grid[0].size();
        vector<vector<int>> visited(row,vector<int>(col,0));
        int number = 0;
        for(int i = 0;i < row;i++)
        {
            for(int j = 0;j < col;j++)
            {
                if(grid[i][j] == '1' && visited[i][j] == 0)
                {
                    number++;
                    dfs(grid,visited,row,col,i,j);
                }
            }
        }
        return number;
    }
};






