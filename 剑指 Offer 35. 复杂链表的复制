/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/
class Solution {
public:
    Node* copyRandomList(Node* head) 
    {
        if(head == NULL) return NULL;
        //1.复制原链表的节点，并插入到对应的节点止之后（遍历）
        //cur  copy  copyafter
        Node* cur = head;
        Node* copyafter = cur->next;
        while(cur)
        {
            Node* copy = (Node*)malloc(sizeof(Node));
            copy->val = cur->val;

            cur->next = copy;
            copy->next = copyafter;
            cur = copyafter;
            if(copyafter)//注意边界,画图
                copyafter = copyafter->next;
            
        }
        //2.处理copy节点的random(遍历)
        cur = head;
        while(cur)
        {
            Node* cur_after = cur->next;
            if(cur->random == NULL)
                cur_after->random = NULL;
            else
            {
                cur_after->random = cur->random->next;
            }
            cur = cur_after->next;
        }
        //3.恢复两个链表（遍历）
        Node* posPre = head;
        Node* pos = head->next;
        Node* posafter = pos->next;

        Node* copyhead = (Node*)malloc(sizeof(Node));
        Node* copytail = copyhead;
        while(posPre)
        {
            //恢复链表
            copytail->next = pos;
            copytail = copytail->next;
            posPre->next = posafter;
            //迭代
            posPre = posafter;
            if(posafter)//注意边界,画图
            {
                pos = posafter->next;
                posafter = posafter->next->next;
            }
        }
        return copyhead->next;
    }
};
